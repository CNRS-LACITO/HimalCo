1. Known issues



2. Possible enhancements

2.1. pylmflib/output/odt.py and pylmflib/config/odt.py
I’ve just taken an example to have the structure. Everything is to implement if you want a functional ODT output document.

2.2. test/test_output_doc.py and test/test_output_odt.py
I’ve just implemented the structure. No real test case is written.

2.3. Toolbox configuration files
Read Toolbox settings to create sort order file for instance.

2.4. LaTeX commands
Implement the LaTeX part of the configuration file.
Move fonts in LaTeX part.
Create an helper fonction to generate the LaTeX header (format, author, etc.).

3. Notes about Python setup

To find out the complete list of options for any command:
$ python setup.py build --help
To find out the complete list of global options:
$ python setup.py --help

$ python setup.py bdist (= bdist_dumb)
$ python setup.py bdist --format=gztar,ztar,tar,zip,rpm,pkgtool,sdux,wininst,msi

bdist_dumb => tar, ztar, gztar, zip
bdist_rpm	=> rpm, srpm
bdist_wininst => wininst
bdist_msi	=> msi

$ python setup.py bdist_rpm --packager="John Doe <jdoe@example.org>" bdist_wininst --target-version="2.0"

To create a source distribution for this module, run this command from a terminal:
$ python setup.py sdist [--formats=zip,gztar,bztar,ztar,tar --owner=root --group=root]

To create an executable installer:
$ python setup.py bdist_wininst
OR
$ python setup.py bdist --formats=wininst

To create an RPM file:
$ python setup.py bdist_rpm
OR
$ python setup.py bdist --formats=rpm

How to create a Debian package?

To find out what distribution formats are available at any time, run:
$ python setup.py bdist --help-formats

To generate the manifest, but not create a source distribution:
$ python setup.py sdist --manifest-only (-o is a shortcut for --manifest-only)
                  
$ python setup.py build
$ python setup.py install
$ python setup.py sdist <distname> upload [-r urltorepo]  (to upload package to pypi or local repository)
$ python setup.py --help-commands

$ python setup.py sdist bdist_wininst upload

To check the long description:
$ python setup.py --long-description | rst2html.py > output.html

TestPyPI
Use the test server URL to register your project (it gives you the right to modify your project on the server):
$ python setup.py register -r https://testpypi.python.org/pypi
Then uploading it:
$ python setup.py upload -r https://testpypi.python.org/pypi
Now that your project is on the server, test that you can install your package from testpypi (it may be a good idea to run your unit tests from another directory to make sure you are using the version you just installed):
$ pip install -i https://testpypi.python.org/pypi <package name>
