<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kind="class" prot="public">
    <compoundname>lmf::src::core::sense::Sense</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ab511b70da3012cc5a0254f34dd30170c" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lmf.src.core.sense.Sense::senseNumber</definition>
        <argsstring></argsstring>
        <name>senseNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="21" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ae0febecc9ab2951c5c6bb82f675187bc" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lmf.src.core.sense.Sense::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="23" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a9adfd8936ecd6626cba82193e068e09e" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lmf.src.core.sense.Sense::definition</definition>
        <argsstring></argsstring>
        <name>definition</name>
        <briefdescription>
<para>Definition instances are owned by <ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> There is zero to many Definition instances per <ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="26" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a51524fd8eb1bc869c2ecfc681339d8aa" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lmf.src.core.sense.Sense::sense</definition>
        <argsstring></argsstring>
        <name>sense</name>
        <briefdescription>
<para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instances are owned by <ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> There is zero to many <ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instances per <ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="29" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a94d3b05f734fbe8898902ae948d30ce5" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lmf.src.core.sense.Sense::equivalent</definition>
        <argsstring></argsstring>
        <name>equivalent</name>
        <briefdescription>
<para>Equivalent instances are owned by <ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> There is zero to many Equivalent instances per <ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="32" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ae2b3da0233748116d4415cc107b6e4c2" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lmf.src.core.sense.Sense::context</definition>
        <argsstring></argsstring>
        <name>context</name>
        <briefdescription>
<para>Context instances are owned by <ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> There is zero to many Context instances per <ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="35" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a1a7524732c66093f7156792292d3c9c3" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lmf.src.core.sense.Sense::subject_field</definition>
        <argsstring></argsstring>
        <name>subject_field</name>
        <briefdescription>
<para>SubjectField instances are owned by <ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> There is zero to many SubjectField instances per <ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="38" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a3f36a95173e4d4e7244e407a725dd3a9" prot="public" static="no" mutable="no">
        <type></type>
        <definition>lmf.src.core.sense.Sense::paradigm</definition>
        <argsstring></argsstring>
        <name>paradigm</name>
        <briefdescription>
<para>Paradigm instances are owned by <ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> There is zero to many Paradigm instances per <ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="41" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1af0279b132d98c7b49141350ce34ea53b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.__init__</definition>
        <argsstring></argsstring>
        <name>__init__</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instances are owned by LexicalEntry. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>IDentifier. If not provided, default value is 0. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="15" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="15" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a3cc439d56624626aaec6588dbcad5b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.__del__</definition>
        <argsstring></argsstring>
        <name>__del__</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
<para>Release Definition, <ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref>, Equivalent, Context, SubjectField, Paradigm instances. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="43" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="43" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1aca94be206f4da6635798c1423aa5db15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_id</definition>
        <argsstring></argsstring>
        <name>get_id</name>
        <briefdescription>
<para>IDentifier. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> attribute &apos;id&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="66" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="66" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a144abbf38354979624e6b6902bd86cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_senseNumber</definition>
        <argsstring></argsstring>
        <name>set_senseNumber</name>
        <briefdescription>
<para>Set sense number. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sense_number</parametername>
</parameternamelist>
<parameterdescription>
<para>The sense number to set. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="72" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="72" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a0c1c636cbbcb1fd1e98e9f5058464d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_senseNumber</definition>
        <argsstring></argsstring>
        <name>get_senseNumber</name>
        <briefdescription>
<para>Get sense number. </para>        </briefdescription>
        <detaileddescription>
<para>If True, return a numerical value. <simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> attribute &apos;senseNumber&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="80" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="80" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a5923d173a0ad52642ccdc50d4611fdc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.create_definition</definition>
        <argsstring></argsstring>
        <name>create_definition</name>
        <briefdescription>
<para>Create a definition. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Definition instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="91" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="91" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a28ac5eef8b1d952ee565792e56a1b748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.add_definition</definition>
        <argsstring></argsstring>
        <name>add_definition</name>
        <briefdescription>
<para>Add a definition to the sense. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>definition</parametername>
</parameternamelist>
<parameterdescription>
<para>The Definition instance to add to the sense. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="97" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="97" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a8bc5ca5fd053360b3150a13fa7787528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_definitions</definition>
        <argsstring></argsstring>
        <name>get_definitions</name>
        <briefdescription>
<para>Get all definitions maintained by the sense. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A Python list of definitions. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="105" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="105" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a9b51914a3abc0ebfd57501a665a69eb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_last_definition</definition>
        <argsstring></argsstring>
        <name>get_last_definition</name>
        <briefdescription>
<para>Get the previously registered Definition instance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The last element of <ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> attribute &apos;definition&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="111" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="111" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1aef07a87a7893b5daea9b6a5a84220cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.find_definitions</definition>
        <argsstring></argsstring>
        <name>find_definitions</name>
        <briefdescription>
<para>Find definitions. </para>        </briefdescription>
        <detaileddescription>
<para>This attribute is owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>The language to consider to retrieve the definition. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Python list of found Definition attributes &apos;definition&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="118" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="118" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a5a033c526c8b56d4ddf8f2f55ba45dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_definition</definition>
        <argsstring></argsstring>
        <name>set_definition</name>
        <briefdescription>
<para>Set definition and language. </para>        </briefdescription>
        <detaileddescription>
<para>These attributes are owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>definition</parametername>
</parameternamelist>
<parameterdescription>
<para>Definition. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>Language of definition. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="130" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="130" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a784fe796429c439fadd5e070954d70b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.find_glosses</definition>
        <argsstring></argsstring>
        <name>find_glosses</name>
        <briefdescription>
<para>Find glosses. </para>        </briefdescription>
        <detaileddescription>
<para>This attribute is owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>The language to consider to retrieve the gloss. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Python list of found Definition attributes &apos;gloss&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="158" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="158" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a2a344e07bebb6d87f711b93ebf711fae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_gloss</definition>
        <argsstring></argsstring>
        <name>set_gloss</name>
        <briefdescription>
<para>Set gloss and language. </para>        </briefdescription>
        <detaileddescription>
<para>These attributes are owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gloss</parametername>
</parameternamelist>
<parameterdescription>
<para>Gloss. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>Language of gloss. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="170" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="170" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a0eadc746a37849a966279d1c35f687fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_note</definition>
        <argsstring></argsstring>
        <name>set_note</name>
        <briefdescription>
<para>Set note, note type and language. </para>        </briefdescription>
        <detaileddescription>
<para>These attributes are owned by Statement, which is owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>note</parametername>
</parameternamelist>
<parameterdescription>
<para>Note to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the note. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>Language used for the note. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="198" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="198" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1acc1067bd6d9a28ac2719d8d442a8d7bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.find_notes</definition>
        <argsstring></argsstring>
        <name>find_notes</name>
        <briefdescription>
<para>Find notes. </para>        </briefdescription>
        <detaileddescription>
<para>This attribute is owned by Statement, which owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the note to consider to retrieve the note. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Python list of found Statement attributes &apos;notes&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="215" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="215" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a9062f1b17bbc52c353edaf26330dcbeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_usage_note</definition>
        <argsstring></argsstring>
        <name>set_usage_note</name>
        <briefdescription>
<para>Set usage note and language. </para>        </briefdescription>
        <detaileddescription>
<para>These attributes are owned by Statement, which is owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>usage_note</parametername>
</parameternamelist>
<parameterdescription>
<para>Usage note to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>Language used for the usage note. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="226" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="226" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1af4a689fe644baaf594abb4d9a1b0ca55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.find_usage_notes</definition>
        <argsstring></argsstring>
        <name>find_usage_notes</name>
        <briefdescription>
<para>Find usage notes. </para>        </briefdescription>
        <detaileddescription>
<para>This attribute is owned by Statement, which owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>Language to consider to retrieve the usage note. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Python list of found Statement attributes &apos;usageNote&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="242" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="242" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a99c9a5071df517bc60f33121d46c0db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_encyclopedic_information</definition>
        <argsstring></argsstring>
        <name>set_encyclopedic_information</name>
        <briefdescription>
<para>Set encyclopedic information and language. </para>        </briefdescription>
        <detaileddescription>
<para>These attributes are owned by Statement, which is owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>encyclopedic_information</parametername>
</parameternamelist>
<parameterdescription>
<para>Encyclopedic information to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>Language used for the encyclopedic information. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="253" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="253" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a7f3f74ce33b047118343b29c4a5196ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.find_encyclopedic_informations</definition>
        <argsstring></argsstring>
        <name>find_encyclopedic_informations</name>
        <briefdescription>
<para>Find encyclopedic informations. </para>        </briefdescription>
        <detaileddescription>
<para>This attribute is owned by Statement, which owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>Language to consider to retrieve the encyclopedic informations. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Python list of found Statement attributes &apos;encyclopedicInformation&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="269" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="269" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a0ed9917e40d5be2e90d628b55f962ee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_restriction</definition>
        <argsstring></argsstring>
        <name>set_restriction</name>
        <briefdescription>
<para>Set restriction and language. </para>        </briefdescription>
        <detaileddescription>
<para>These attributes are owned by Statement, which is owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>restriction</parametername>
</parameternamelist>
<parameterdescription>
<para>Restriction to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>Language used for the restriction. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="280" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="280" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ad2997077bd0e68f4af1542ade3e64417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.find_restrictions</definition>
        <argsstring></argsstring>
        <name>find_restrictions</name>
        <briefdescription>
<para>Find restrictions. </para>        </briefdescription>
        <detaileddescription>
<para>This attribute is owned by Statement, which owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>Language to consider to retrieve the restriction. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Python list of found Statement attributes &apos;restriction&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="296" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="296" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a1174533bdabb24b077835ad384fb564c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_borrowed_word</definition>
        <argsstring></argsstring>
        <name>set_borrowed_word</name>
        <briefdescription>
<para>Set source language (in English). </para>        </briefdescription>
        <detaileddescription>
<para>Attribute &apos;borrowedWord&apos; is owned by Statement, which is owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>borrowed_word</parametername>
</parameternamelist>
<parameterdescription>
<para>Source language. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="307" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="307" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a228d6a83808888d3805c06657c8f9153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_borrowed_word</definition>
        <argsstring></argsstring>
        <name>get_borrowed_word</name>
        <briefdescription>
<para>Get source language (in English). </para>        </briefdescription>
        <detaileddescription>
<para>This attribute is owned by Statement, which is owned by Definition. <simplesect kind="return"><para>Statement attribute &apos;borrowedWord&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="322" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="322" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1adce959778963de3b295d05f81fa83390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_written_form</definition>
        <argsstring></argsstring>
        <name>set_written_form</name>
        <briefdescription>
<para>Set loan word. </para>        </briefdescription>
        <detaileddescription>
<para>Attribute &apos;writtenForm&apos; is owned by Statement, which is owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>written_form</parametername>
</parameternamelist>
<parameterdescription>
<para>Loan word. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="333" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="333" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a06bf005156e07ed1262d53193bb75dc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_written_form</definition>
        <argsstring></argsstring>
        <name>get_written_form</name>
        <briefdescription>
<para>Get loan word. </para>        </briefdescription>
        <detaileddescription>
<para>This attribute is owned by Statement, which is owned by Definition. <simplesect kind="return"><para>Statement attribute &apos;writtenForm&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="348" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="348" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a53537f8c8c41b7ad740fef272c9f8658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_etymology</definition>
        <argsstring></argsstring>
        <name>set_etymology</name>
        <briefdescription>
<para>Set etymology. </para>        </briefdescription>
        <detaileddescription>
<para>Attribute &apos;etymology&apos; is owned by Statement, which is owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>etymology</parametername>
</parameternamelist>
<parameterdescription>
<para>Etymology. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="359" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="359" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ae41863c9c5fdf94f3f29c13d6b1fe1cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_etymology</definition>
        <argsstring></argsstring>
        <name>get_etymology</name>
        <briefdescription>
<para>Get etymology. </para>        </briefdescription>
        <detaileddescription>
<para>This attribute is owned by Statement, which is owned by Definition. <simplesect kind="return"><para>The first found Statement attribute &apos;etymology&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="374" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="374" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a621686bc8d18f6abd0f9a284f9c4b938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_etymology_comment</definition>
        <argsstring></argsstring>
        <name>set_etymology_comment</name>
        <briefdescription>
<para>Set etymology comment and language. </para>        </briefdescription>
        <detaileddescription>
<para>Attributes &apos;etymologyComment&apos; and &apos;termSourceLanguage&apos; are owned by Statement, which is owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>etymology_comment</parametername>
</parameternamelist>
<parameterdescription>
<para>Etymology comment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>term_source_language</parametername>
</parameternamelist>
<parameterdescription>
<para>Language of the comment. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="383" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="383" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a60c30c7573483fd9d987c8c439688213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_etymology_comment</definition>
        <argsstring></argsstring>
        <name>get_etymology_comment</name>
        <briefdescription>
<para>Get etymology comment. </para>        </briefdescription>
        <detaileddescription>
<para>This attribute is owned by Statement, which is owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>term_source_language</parametername>
</parameternamelist>
<parameterdescription>
<para>The language of the etymology comment to retrieve. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The first found Statement attribute &apos;etymologyComment&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="399" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="399" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ab6f704b6dd461728169ffb3c74e43896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_term_source_language</definition>
        <argsstring></argsstring>
        <name>get_term_source_language</name>
        <briefdescription>
<para>Get language used for the etymology comment. </para>        </briefdescription>
        <detaileddescription>
<para>This attribute is owned by Statement, which is owned by Definition. <simplesect kind="return"><para>Statement attribute &apos;termSourceLanguage&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="409" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="409" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a2008e37c341cb4bb59bae4ed74bddef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_etymology_gloss</definition>
        <argsstring></argsstring>
        <name>set_etymology_gloss</name>
        <briefdescription>
<para>Set etymology gloss. </para>        </briefdescription>
        <detaileddescription>
<para>Attribute &apos;etymologyGloss&apos; is owned by Statement, which is owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>etymology_gloss</parametername>
</parameternamelist>
<parameterdescription>
<para>Etymology gloss. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="420" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="420" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1adb7c6fd2e19771361a94025df3343a58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_etymology_gloss</definition>
        <argsstring></argsstring>
        <name>get_etymology_gloss</name>
        <briefdescription>
<para>Get etymology gloss. </para>        </briefdescription>
        <detaileddescription>
<para>This attribute is owned by Statement, which is owned by Definition. <simplesect kind="return"><para>Statement attribute &apos;etymologyGloss&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="435" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="435" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ad869f9c4fcfca1775a74f6e1370c3476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_etymology_source</definition>
        <argsstring></argsstring>
        <name>set_etymology_source</name>
        <briefdescription>
<para>Set etymology source. </para>        </briefdescription>
        <detaileddescription>
<para>Attribute &apos;etymologySource&apos; is owned by Statement, which is owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>etymology_source</parametername>
</parameternamelist>
<parameterdescription>
<para>Etymology source. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="446" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="446" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a58b3a4780ebc7fec50bd5088fef02d87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_etymology_source</definition>
        <argsstring></argsstring>
        <name>get_etymology_source</name>
        <briefdescription>
<para>Get etymology source. </para>        </briefdescription>
        <detaileddescription>
<para>This attribute is owned by Statement, which is owned by Definition. <simplesect kind="return"><para>Statement attribute &apos;etymologySource&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="461" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="461" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a98dae38e1997fb9e04cf2ad8ee47591a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_scientific_name</definition>
        <argsstring></argsstring>
        <name>set_scientific_name</name>
        <briefdescription>
<para>Set scientific name. </para>        </briefdescription>
        <detaileddescription>
<para>Attribute &apos;scientificName&apos; is owned by Statement, which is owned by Definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scientific_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Scientific name. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="472" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="472" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1adeaf450f92e0f7726c1152f4d8b1944d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_scientific_name</definition>
        <argsstring></argsstring>
        <name>get_scientific_name</name>
        <briefdescription>
<para>Get scientific name. </para>        </briefdescription>
        <detaileddescription>
<para>This attribute is owned by Statement, which is owned by Definition. <simplesect kind="return"><para>Statement attribute &apos;scientificName&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="487" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="487" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ac61f3aadccb06f636aad9891b3bba53e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.create_paradigm</definition>
        <argsstring></argsstring>
        <name>create_paradigm</name>
        <briefdescription>
<para>Create a paradigm. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Paradigm instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="498" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="498" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ae67664c5b120e407e5d0543ad5bdfb3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.add_paradigm</definition>
        <argsstring></argsstring>
        <name>add_paradigm</name>
        <briefdescription>
<para>Add a paradigm to the sense. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>paradigm</parametername>
</parameternamelist>
<parameterdescription>
<para>The Paradigm instance to add to the sense. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="504" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="504" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a41112d70652f5412eb71eacad72a135a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_paradigms</definition>
        <argsstring></argsstring>
        <name>get_paradigms</name>
        <briefdescription>
<para>Get all paradigms maintained by the sense. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A Python list of paradigms. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="512" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="512" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1abdb32f5050397be1f2147b769fc97f6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_last_paradigm</definition>
        <argsstring></argsstring>
        <name>get_last_paradigm</name>
        <briefdescription>
<para>Get the previously registered Paradigm instance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The last element of <ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> attribute &apos;paradigm&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="518" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="518" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ab30230d0322d864c2222ba5471f1a305" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_paradigm_label</definition>
        <argsstring></argsstring>
        <name>set_paradigm_label</name>
        <briefdescription>
<para>Set paradigm label. </para>        </briefdescription>
        <detaileddescription>
<para>Attribute &apos;paradigmLabel&apos; is owned by Paradigm. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>paradigm_label</parametername>
</parameternamelist>
<parameterdescription>
<para>Paradigm label. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="525" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="525" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1abe2105eb98e2fc6349fa82965ad58261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_paradigm_form</definition>
        <argsstring></argsstring>
        <name>set_paradigm_form</name>
        <briefdescription>
<para>Set paradigm form and language. </para>        </briefdescription>
        <detaileddescription>
<para>Attributes &apos;paradigm&apos; and &apos;language&apos; are owned by Paradigm. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>paradigm_form</parametername>
</parameternamelist>
<parameterdescription>
<para>Paradigm form. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>Language used for the paradigm form. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="535" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="535" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a4b47011de018711098677f188e973fca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_morphology</definition>
        <argsstring></argsstring>
        <name>set_morphology</name>
        <briefdescription>
<para>Set morphology. </para>        </briefdescription>
        <detaileddescription>
<para>Attribute &apos;morphology&apos; is owned by Paradigm. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>morphology</parametername>
</parameternamelist>
<parameterdescription>
<para>Morphology. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="564" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="564" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a14ced3b1dd8115d72283d6708d3ce0b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.create_and_add_context</definition>
        <argsstring></argsstring>
        <name>create_and_add_context</name>
        <briefdescription>
<para>Create a context and add it to the list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference</parametername>
</parameternamelist>
<parameterdescription>
<para>The context reference to set. If not provided, default value is None. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Context instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="583" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="583" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a50f6e0ba88d00c3315b91d3787aa9085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_contexts</definition>
        <argsstring></argsstring>
        <name>get_contexts</name>
        <briefdescription>
<para>Get all contexts maintained by the sense. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A Python list of contexts. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="592" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="592" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1af9c1b79eed28bd28279719bdf578d218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_last_context</definition>
        <argsstring></argsstring>
        <name>get_last_context</name>
        <briefdescription>
<para>Get the previously registered Context instance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The last element of <ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> attribute &apos;context&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="598" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="598" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a61c046aabce91368de9129dd83c2bb20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.create_example</definition>
        <argsstring></argsstring>
        <name>create_example</name>
        <briefdescription>
<para>Create a Context instance and set its reference. </para>        </briefdescription>
        <detaileddescription>
<para>Attribute &apos;targets&apos; is owned by Context. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reference</parametername>
</parameternamelist>
<parameterdescription>
<para>The example reference to set. If not provided, default value is None. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="605" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="605" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ac901c4bce7721237a2e2c58bf7a11f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.create_and_add_example</definition>
        <argsstring></argsstring>
        <name>create_and_add_example</name>
        <briefdescription>
<para>Set written form, language and script of a new Context instance. </para>        </briefdescription>
        <detaileddescription>
<para>Attributes &apos;writtenForm&apos;, &apos;language&apos; and &apos;scriptName&apos; are owned by TextRepresentation, which is owned by Context. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>written_form</parametername>
</parameternamelist>
<parameterdescription>
<para>The written form to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>Language used for the written form. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>script_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the script used to write the example, e.g. devanagari. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="614" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="614" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ab84c8d7a1cdcce014f99e0c1a1b0aedd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.add_example</definition>
        <argsstring></argsstring>
        <name>add_example</name>
        <briefdescription>
<para>Set written form, language and script of an existing Context instance. </para>        </briefdescription>
        <detaileddescription>
<para>Attributes &apos;writtenForm&apos;, &apos;language&apos; and &apos;scriptName&apos; are owned by TextRepresentation, which is owned by Context. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>written_form</parametername>
</parameternamelist>
<parameterdescription>
<para>The written form to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>Language used for the written form. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>script_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the script used to write the example, e.g. devanagari. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="630" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="630" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a9b8d8ea7fe946dd19e2538fe7801754a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_example_comment</definition>
        <argsstring></argsstring>
        <name>set_example_comment</name>
        <briefdescription>
<para>Set comment of an existing Context instance. </para>        </briefdescription>
        <detaileddescription>
<para>Attribute &apos;comment&apos; is owned by TextRepresentation, which is owned by Context. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>comment</parametername>
</parameternamelist>
<parameterdescription>
<para>The comment to set. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="646" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="646" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a07d199aca70cf878cb2a71af7a96fa4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.create_and_add_subject_field</definition>
        <argsstring></argsstring>
        <name>create_and_add_subject_field</name>
        <briefdescription>
<para>Create a subject field and add it to the list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>SubjectField instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="660" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="660" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a907267d97926d04d20aaeefe475753d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_subject_fields</definition>
        <argsstring></argsstring>
        <name>get_subject_fields</name>
        <briefdescription>
<para>Get all subject fields maintained by the sense. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A Python list of subject fields. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="668" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="668" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ad46f7e623293409ca06494b5fdeebe52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_semantic_domain</definition>
        <argsstring></argsstring>
        <name>set_semantic_domain</name>
        <briefdescription>
<para>Create a SubjectField instance and set its semantic domain and language. </para>        </briefdescription>
        <detaileddescription>
<para>Attributes &apos;semanticDomain&apos; and &apos;language&apos; are owned by SubjectField. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>semantic_domain</parametername>
</parameternamelist>
<parameterdescription>
<para>The semantic domain to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>Language used to describe the semantic domain. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="674" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="674" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a6004e31b078cad1d029283c4e3fedfc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.create_and_add_equivalent</definition>
        <argsstring></argsstring>
        <name>create_and_add_equivalent</name>
        <briefdescription>
<para>Create an equivalent and add it to the list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Equivalent instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="684" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="684" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ad01163c4440025fe86e4c00734aa8894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_equivalents</definition>
        <argsstring></argsstring>
        <name>get_equivalents</name>
        <briefdescription>
<para>Get all equivalents maintained by the sense. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A Python list of equivalents. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="692" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="692" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a97469fcc2116bb7b0dbf4826161512bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.set_translation</definition>
        <argsstring></argsstring>
        <name>set_translation</name>
        <briefdescription>
<para>Create an Equivalent instance and set its translation and language. </para>        </briefdescription>
        <detaileddescription>
<para>Attributes &apos;translation&apos; and &apos;language&apos; are owned by Equivalent. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>translation</parametername>
</parameternamelist>
<parameterdescription>
<para>The translation to set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>Language used for the translation. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense" kindref="compound">Sense</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="698" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="698" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1abeaa946d4c063f6784b84e443a102c2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def lmf.src.core.sense.Sense.get_translations</definition>
        <argsstring></argsstring>
        <name>get_translations</name>
        <briefdescription>
<para>Get all translations. </para>        </briefdescription>
        <detaileddescription>
<para>This attribute is owned by Equivalent. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>If this argument is given, get only translations that are described using this language. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A Python list of filtered Equivalent attributes &apos;translation&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="708" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="708" bodyend="719"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>&quot;Sense is a class representing one meaning of a lexical entry. The Sense class allows for hierarchical senses in that a sense may be more specific than another sense of the same lexical entry.&quot; (LMF) </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" line="12" column="1" bodyfile="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/core/sense.py" bodystart="12" bodyend="719"/>
    <listofallmembers>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a3cc439d56624626aaec6588dbcad5b58" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>__del__</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1af0279b132d98c7b49141350ce34ea53b" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>__init__</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a28ac5eef8b1d952ee565792e56a1b748" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>add_definition</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ab84c8d7a1cdcce014f99e0c1a1b0aedd" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>add_example</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ae67664c5b120e407e5d0543ad5bdfb3d" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>add_paradigm</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ae2b3da0233748116d4415cc107b6e4c2" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>context</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a14ced3b1dd8115d72283d6708d3ce0b5" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>create_and_add_context</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a6004e31b078cad1d029283c4e3fedfc2" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>create_and_add_equivalent</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ac901c4bce7721237a2e2c58bf7a11f2b" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>create_and_add_example</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a07d199aca70cf878cb2a71af7a96fa4c" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>create_and_add_subject_field</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a5923d173a0ad52642ccdc50d4611fdc9" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>create_definition</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a61c046aabce91368de9129dd83c2bb20" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>create_example</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ac61f3aadccb06f636aad9891b3bba53e" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>create_paradigm</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a9adfd8936ecd6626cba82193e068e09e" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>definition</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a94d3b05f734fbe8898902ae948d30ce5" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>equivalent</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1aef07a87a7893b5daea9b6a5a84220cab" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>find_definitions</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a7f3f74ce33b047118343b29c4a5196ce" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>find_encyclopedic_informations</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a784fe796429c439fadd5e070954d70b3" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>find_glosses</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1acc1067bd6d9a28ac2719d8d442a8d7bb" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>find_notes</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ad2997077bd0e68f4af1542ade3e64417" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>find_restrictions</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1af4a689fe644baaf594abb4d9a1b0ca55" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>find_usage_notes</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a228d6a83808888d3805c06657c8f9153" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_borrowed_word</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a50f6e0ba88d00c3315b91d3787aa9085" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_contexts</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a8bc5ca5fd053360b3150a13fa7787528" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_definitions</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ad01163c4440025fe86e4c00734aa8894" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_equivalents</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ae41863c9c5fdf94f3f29c13d6b1fe1cf" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_etymology</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a60c30c7573483fd9d987c8c439688213" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_etymology_comment</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1adb7c6fd2e19771361a94025df3343a58" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_etymology_gloss</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a58b3a4780ebc7fec50bd5088fef02d87" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_etymology_source</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1aca94be206f4da6635798c1423aa5db15" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_id</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1af9c1b79eed28bd28279719bdf578d218" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_last_context</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a9b51914a3abc0ebfd57501a665a69eb2" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_last_definition</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1abdb32f5050397be1f2147b769fc97f6d" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_last_paradigm</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a41112d70652f5412eb71eacad72a135a" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_paradigms</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1adeaf450f92e0f7726c1152f4d8b1944d" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_scientific_name</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a0c1c636cbbcb1fd1e98e9f5058464d73" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_senseNumber</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a907267d97926d04d20aaeefe475753d8" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_subject_fields</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ab6f704b6dd461728169ffb3c74e43896" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_term_source_language</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1abeaa946d4c063f6784b84e443a102c2c" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_translations</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a06bf005156e07ed1262d53193bb75dc3" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>get_written_form</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ae0febecc9ab2951c5c6bb82f675187bc" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>id</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a3f36a95173e4d4e7244e407a725dd3a9" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>paradigm</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a51524fd8eb1bc869c2ecfc681339d8aa" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>sense</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ab511b70da3012cc5a0254f34dd30170c" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>senseNumber</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a1174533bdabb24b077835ad384fb564c" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_borrowed_word</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a5a033c526c8b56d4ddf8f2f55ba45dec" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_definition</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a99c9a5071df517bc60f33121d46c0db1" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_encyclopedic_information</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a53537f8c8c41b7ad740fef272c9f8658" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_etymology</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a621686bc8d18f6abd0f9a284f9c4b938" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_etymology_comment</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a2008e37c341cb4bb59bae4ed74bddef2" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_etymology_gloss</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ad869f9c4fcfca1775a74f6e1370c3476" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_etymology_source</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a9b8d8ea7fe946dd19e2538fe7801754a" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_example_comment</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a2a344e07bebb6d87f711b93ebf711fae" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_gloss</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a4b47011de018711098677f188e973fca" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_morphology</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a0eadc746a37849a966279d1c35f687fe" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_note</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1abe2105eb98e2fc6349fa82965ad58261" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_paradigm_form</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ab30230d0322d864c2222ba5471f1a305" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_paradigm_label</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a0ed9917e40d5be2e90d628b55f962ee8" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_restriction</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a98dae38e1997fb9e04cf2ad8ee47591a" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_scientific_name</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1ad46f7e623293409ca06494b5fdeebe52" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_semantic_domain</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a144abbf38354979624e6b6902bd86cb7" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_senseNumber</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a97469fcc2116bb7b0dbf4826161512bd" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_translation</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a9062f1b17bbc52c353edaf26330dcbeb" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_usage_note</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1adce959778963de3b295d05f81fa83390" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>set_written_form</name></member>
      <member refid="classlmf_1_1src_1_1core_1_1sense_1_1_sense_1a1a7524732c66093f7156792292d3c9c3" prot="public" virt="non-virtual"><scope>lmf::src::core::sense::Sense</scope><name>subject_field</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
