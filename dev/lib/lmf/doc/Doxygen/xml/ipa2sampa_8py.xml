<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="ipa2sampa_8py" kind="file">
    <compoundname>ipa2sampa.py</compoundname>
    <innernamespace refid="namespacelmf_1_1src_1_1utils_1_1ipa2sampa_1_1ipa2sampa">lmf::src::utils::ipa2sampa::ipa2sampa</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacelmf_1_1src_1_1utils_1_1ipa2sampa_1_1ipa2sampa" refkind="compound"><highlight class="comment">#!<sp/>/usr/bin/env<sp/>python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>author<sp/><sp/><sp/>:<sp/>Mattis<sp/>List</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>email<sp/><sp/><sp/><sp/>:<sp/>mattis.list@lingpy.org</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>created<sp/><sp/>:<sp/>2015-01-20<sp/>15:26</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>modified<sp/>:<sp/>2015-01-20<sp/>15:50</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>print_function,unicode_literals</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>unicodedata</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>codecs</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>load<sp/>sampa<sp/>and<sp/>ipa<sp/>csv<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="namespacelmf_1_1src_1_1utils_1_1ipa2sampa_1_1ipa2sampa_1a8a95155398fd80089637dc91bec08dd4" refkind="member"><highlight class="normal">data<sp/>=<sp/>codecs.open(</highlight><highlight class="stringliteral">&apos;./src/utils/ipa2sampa/sampa.csv&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;</highlight><highlight class="stringliteral">r&apos;,<sp/>&apos;</highlight><highlight class="normal">utf-8&apos;)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#<sp/>load<sp/>source<sp/>and<sp/>target<sp/>items</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="namespacelmf_1_1src_1_1utils_1_1ipa2sampa_1_1ipa2sampa_1aafe2729198b6e17baf543acf1cde5a2c" refkind="member"><highlight class="normal">sota<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>line<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>data:</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>line.strip()<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>line.startswith(</highlight><highlight class="stringliteral">&apos;#&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>so,ta<sp/>=<sp/>unicodedata.normalize(</highlight><highlight class="stringliteral">&quot;NFD&quot;</highlight><highlight class="normal">,line.strip()).split(</highlight><highlight class="stringliteral">&apos;\t&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="24" refid="namespacelmf_1_1src_1_1utils_1_1ipa2sampa_1_1ipa2sampa_1a2fad537cd70d78b8061780b2a2a8d986" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ta<sp/>=<sp/>eval(</highlight><highlight class="stringliteral">&apos;&quot;&quot;&quot;&apos;</highlight><highlight class="normal">+ta+</highlight><highlight class="stringliteral">&apos;&quot;&quot;&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sota<sp/>+=<sp/>[(so,ta)]</highlight></codeline>
<codeline lineno="28"><highlight class="normal">sota<sp/>=<sp/>dict([(b,a)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>a,b<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sota])</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="namespacelmf_1_1src_1_1utils_1_1ipa2sampa_1_1ipa2sampa_1af77b860d37ddfcd77e56bf7ed1e897b8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelmf_1_1src_1_1utils_1_1ipa2sampa_1_1ipa2sampa_1af77b860d37ddfcd77e56bf7ed1e897b8" kindref="member">uni2sampa</ref>(sequence):</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Convert<sp/>sequence<sp/>in<sp/>unicode-ipa<sp/>to<sp/>ascii-sampa.</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Forked<sp/>from<sp/>LingPy&apos;s<sp/>version<sp/>for<sp/>ipa2sampa,<sp/>which<sp/>is<sp/>based<sp/>on<sp/>code</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>taken<sp/>from<sp/>Peter<sp/>Kleiweg</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>(http://www.let.rug.nl/~kleiweg/L04/devel/python/xsampa.html).</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>type(sequence)<sp/>==<sp/>str:</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sequence<sp/>=<sp/>unicode(sequence,<sp/></highlight><highlight class="stringliteral">&apos;utf-8&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>seq<sp/>=<sp/>[k<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>k<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>unicodedata.normalize(</highlight><highlight class="stringliteral">&apos;NFD&apos;</highlight><highlight class="normal">,<sp/>sequence)]</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>seq:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seg<sp/>=<sp/>seq.pop(0)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>sota[seg]</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>KeyError:</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>seg</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>out</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>with<sp/>codecs.open(</highlight><highlight class="stringliteral">&apos;./src/utils/ipa2sampa/tokens.test&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;</highlight><highlight class="stringliteral">r&apos;,&apos;</highlight><highlight class="normal">utf-8&apos;)<sp/>as<sp/>f:</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>line<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>f:</highlight></codeline>
<codeline lineno="59" refid="namespacelmf_1_1src_1_1utils_1_1ipa2sampa_1_1ipa2sampa_1a2bff6b612a31a796771c153db6ee739b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq<sp/>=<sp/>line.strip()</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(seq,</highlight><highlight class="stringliteral">&apos;\t&apos;</highlight><highlight class="normal">,<ref refid="namespacelmf_1_1src_1_1utils_1_1ipa2sampa_1_1ipa2sampa_1af77b860d37ddfcd77e56bf7ed1e897b8" kindref="member">uni2sampa</ref>(seq))</highlight></codeline>
    </programlisting>
    <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/utils/ipa2sampa/ipa2sampa.py"/>
  </compounddef>
</doxygen>
