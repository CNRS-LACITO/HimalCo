<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.7">
  <compounddef id="input_2xml__lmf_8py" kind="file">
    <compoundname>xml_lmf.py</compoundname>
    <innernamespace refid="namespacelmf_1_1src_1_1input_1_1xml__lmf">lmf::src::input::xml_lmf</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacelmf_1_1src_1_1input_1_1xml__lmf" refkind="compound"><highlight class="comment">#!<sp/>/usr/bin/env<sp/>python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>utils.xml_format<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>parse_xml</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>utils.error_handling<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>InputError</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="namespacelmf_1_1src_1_1input_1_1xml__lmf_1a1f88f5cb321107e2e3fc973a0f4bb0c7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelmf_1_1src_1_1input_1_1xml__lmf_1a1f88f5cb321107e2e3fc973a0f4bb0c7" kindref="member">compute_name</ref>(object_name):</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;!<sp/>@brief<sp/>Compute<sp/>attribute/module<sp/>name<sp/>from<sp/>object<sp/>name<sp/>as<sp/>follows:<sp/>&apos;ObjectName&apos;<sp/>attribute/module<sp/>name<sp/>is<sp/>&apos;object_name&apos;.</highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@param<sp/>object_name<sp/>String<sp/>containing<sp/>name<sp/>of<sp/>the<sp/>object,<sp/>e.g.<sp/>&apos;LexicalEntry&apos;.</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@return<sp/>The<sp/>corresponding<sp/>attribute/module<sp/>name,<sp/>e.g.<sp/>&apos;lexical_entry&apos;.</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>c<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>object_name:</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Detect<sp/>first<sp/>letter<sp/>of<sp/>a<sp/>word:<sp/>it<sp/>is<sp/>an<sp/>uppercase<sp/>letter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>c.isupper():</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>an<sp/>underscore<sp/>separator<sp/>between<sp/>words<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>name<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;_&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>+=<sp/>c.lower()</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="namespacelmf_1_1src_1_1input_1_1xml__lmf_1ad5950c4bfa3184c81159c4f1be1f4e43" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelmf_1_1src_1_1input_1_1xml__lmf_1ad5950c4bfa3184c81159c4f1be1f4e43" kindref="member">factory</ref>(object_name,<sp/>attributes):</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;!<sp/>@brief<sp/>This<sp/>function<sp/>is<sp/>an<sp/>object<sp/>factory.<sp/>Indeed,<sp/>from<sp/>an<sp/>object<sp/>name<sp/>and<sp/>its<sp/>attributes,<sp/>it<sp/>creates<sp/>a<sp/>Python<sp/>object<sp/>and<sp/>sets<sp/>its<sp/>attributes.</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@param<sp/>object_name<sp/>A<sp/>Python<sp/>string<sp/>containing<sp/>the<sp/>object<sp/>name,<sp/>for<sp/>instance<sp/>&apos;LexicalEntry&apos;.</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@param<sp/>attributes<sp/>A<sp/>Python<sp/>dictionary<sp/>containing<sp/>pairs<sp/>of<sp/>attribute<sp/>name<sp/>(as<sp/>a<sp/>Python<sp/>string)<sp/>and<sp/>value,<sp/>for<sp/>instance<sp/>{&apos;partOfSpeech&apos;:<sp/>&apos;n&apos;}.</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Compute<sp/>module<sp/>name<sp/>from<sp/>object<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>module_name<sp/>=<sp/><ref refid="namespacelmf_1_1src_1_1input_1_1xml__lmf_1a1f88f5cb321107e2e3fc973a0f4bb0c7" kindref="member">compute_name</ref>(object_name)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Find<sp/>the<sp/>package<sp/>in<sp/>which<sp/>the<sp/>object<sp/>class<sp/>is<sp/>defined,<sp/>in<sp/>order<sp/>to<sp/>be<sp/>able<sp/>to<sp/>import<sp/>the<sp/>correct<sp/>Python<sp/>module</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys,<sp/>os,<sp/>glob</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>running_path<sp/>=<sp/>sys.path[0]</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>os.name<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;posix&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Unix-style<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separator<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Windows-style<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separator<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\\&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>full_path<sp/>=<sp/>glob.glob(running_path<sp/>+<sp/>separator<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal"><sp/>+<sp/>separator<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;src&quot;</highlight><highlight class="normal"><sp/>+<sp/>separator<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal"><sp/>+<sp/>separator<sp/>+<sp/>module_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.py&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(full_path)<sp/>&lt;<sp/>1:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>No<sp/>file<sp/>with<sp/>this<sp/>name<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>InputError(module_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.py&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>file<sp/>named<sp/>&apos;%s&apos;<sp/>exists<sp/>in<sp/>the<sp/>library.<sp/>It<sp/>is<sp/>not<sp/>allowed,<sp/>so<sp/>please<sp/>solve<sp/>this<sp/>issue<sp/>by<sp/>renaming<sp/>files<sp/>correctly.&quot;</highlight><highlight class="normal"><sp/>%<sp/>(module_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.py&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>len(full_path)<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Several<sp/>files<sp/>with<sp/>this<sp/>name<sp/>exist.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>InputError(module_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.py&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Several<sp/>files<sp/>named<sp/>&apos;%s&apos;<sp/>exist<sp/>in<sp/>the<sp/>library.<sp/>It<sp/>is<sp/>not<sp/>allowed,<sp/>so<sp/>please<sp/>solve<sp/>this<sp/>issue<sp/>by<sp/>renaming<sp/>files<sp/>correctly.<sp/>Here<sp/>is<sp/>the<sp/>list<sp/>of<sp/>found<sp/>files<sp/>with<sp/>this<sp/>name:<sp/>%s&quot;</highlight><highlight class="normal"><sp/>%<sp/>((module_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.py&quot;</highlight><highlight class="normal">),<sp/>str(full_path)))</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Retrieve<sp/>package<sp/>name<sp/>from<sp/>full<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>package_name<sp/>=<sp/>full_path[0].split(separator)[-2]</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Import<sp/>object<sp/>module:<sp/>&quot;package.module&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>object_module<sp/>=<sp/>__import__(package_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>+<sp/>module_name)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Retrieve<sp/>object<sp/>class<sp/>from<sp/>module</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>object_class<sp/>=<sp/>getattr(object_module,<sp/>object_name)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Create<sp/>an<sp/>instance<sp/>of<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>instance<sp/>=<sp/>object_class()</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>class<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>attribute<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>attributes.iteritems():</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setattr(instance,<sp/>attribute[0],<sp/>attribute[1])</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="namespacelmf_1_1src_1_1input_1_1xml__lmf_1ab05e23f6bb643a98979becb219b050da" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelmf_1_1src_1_1input_1_1xml__lmf_1ab05e23f6bb643a98979becb219b050da" kindref="member">xml_lmf_read</ref>(filename):</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;!<sp/>@brief<sp/>Read<sp/>an<sp/>XML<sp/>LMF<sp/>file.</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@param<sp/>filename<sp/>The<sp/>name<sp/>of<sp/>the<sp/>XML<sp/>LMF<sp/>file<sp/>to<sp/>read<sp/>with<sp/>full<sp/>path,<sp/>for<sp/>instance<sp/>&apos;user/input.xml&apos;.</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@return<sp/>A<sp/>Lexicon<sp/>instance<sp/>containing<sp/>all<sp/>lexical<sp/>entries.</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>root<sp/>=<sp/><ref refid="namespacelmf_1_1src_1_1utils_1_1xml__format_1a7545cf89e2abcbc425a998ad8b1dea94" kindref="member">parse_xml</ref>(filename)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Create<sp/>an<sp/>object<sp/>instance<sp/>corresponding<sp/>to<sp/>the<sp/>XML<sp/>root<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>root_instance<sp/>=<sp/><ref refid="namespacelmf_1_1src_1_1input_1_1xml__lmf_1ad5950c4bfa3184c81159c4f1be1f4e43" kindref="member">factory</ref>(root.tag,<sp/>root.attrib)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Parse<sp/>XML<sp/>sub-elements<sp/>and<sp/>create<sp/>instance<sp/>childs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacelmf_1_1src_1_1input_1_1xml__lmf_1a69c23caee6c3bfe7ba54804aad65f879" kindref="member">get_sub_elements</ref>(root_instance,<sp/>root)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>root_instance</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="namespacelmf_1_1src_1_1input_1_1xml__lmf_1a69c23caee6c3bfe7ba54804aad65f879" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacelmf_1_1src_1_1input_1_1xml__lmf_1a69c23caee6c3bfe7ba54804aad65f879" kindref="member">get_sub_elements</ref>(instance,<sp/>element):</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;!<sp/>@brief<sp/>This<sp/>function<sp/>recursively<sp/>parses<sp/>the<sp/>given<sp/>XML<sp/>element<sp/>and<sp/>creates<sp/>corresponding<sp/>LMF<sp/>instances<sp/>with<sp/>their<sp/>attributes.</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@param<sp/>instance<sp/>An<sp/>LMF<sp/>object<sp/>instance.</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@param<sp/>element<sp/>An<sp/>XML<sp/>element.</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>sub_element<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>element:</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>XML<sp/>elements<sp/>&quot;feat&quot;<sp/>are<sp/>modelized<sp/>by<sp/>LMF<sp/>class<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sub_element.tag<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;feat&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>&quot;feat&quot;<sp/>elements<sp/>have<sp/>2<sp/>XML<sp/>attributes:<sp/>one<sp/>for<sp/>LMF<sp/>attribute<sp/>name<sp/>(&quot;att&quot;),<sp/>a<sp/>second<sp/>for<sp/>LMF<sp/>attribute<sp/>value<sp/>(&quot;val&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setattr(instance,<sp/>sub_element.attrib[</highlight><highlight class="stringliteral">&quot;att&quot;</highlight><highlight class="normal">],<sp/>sub_element.attrib[</highlight><highlight class="stringliteral">&quot;val&quot;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Create<sp/>LMF<sp/>instances<sp/>corresponding<sp/>to<sp/>XML<sp/>sub-elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub_instance<sp/>=<sp/><ref refid="namespacelmf_1_1src_1_1input_1_1xml__lmf_1ad5950c4bfa3184c81159c4f1be1f4e43" kindref="member">factory</ref>(sub_element.tag,<sp/>sub_element.attrib)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Root<sp/>LMF<sp/>object<sp/>must<sp/>own<sp/>the<sp/>child<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr_name<sp/>=<sp/><ref refid="namespacelmf_1_1src_1_1input_1_1xml__lmf_1a1f88f5cb321107e2e3fc973a0f4bb0c7" kindref="member">compute_name</ref>(sub_element.tag)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr_value<sp/>=<sp/>getattr(instance,<sp/>attr_name)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>type(attr_value)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>list:</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>this<sp/>attribute<sp/>is<sp/>a<sp/>list,<sp/>append<sp/>the<sp/>new<sp/>value<sp/>to<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr_value.append(sub_instance)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Simply<sp/>set<sp/>the<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setattr(instance,<sp/>attr_name,<sp/>sub_instance)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Repeat<sp/>the<sp/>same<sp/>operation<sp/>recursively</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacelmf_1_1src_1_1input_1_1xml__lmf_1a69c23caee6c3bfe7ba54804aad65f879" kindref="member">get_sub_elements</ref>(sub_instance,<sp/>sub_element)</highlight></codeline>
    </programlisting>
    <location file="/Users/celine/Work/CNRS/workspace/HimalCo/dev/lib/lmf/src/input/xml_lmf.py"/>
  </compounddef>
</doxygen>
